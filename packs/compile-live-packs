#!/bin/bash
#
# Compiles the submodules that require it.
#
# At the moment this has been very quickly (manually) probed by considering and
# checking all the submodules that have either Makefile or a CMakeLists.txt

set -euo pipefail

usage() { echo -e "Compile the submodules in the Emacs Live packs.\n\nUsage: $0 [--clean --cider]\n" 1>&2; exit 1; }
pause() { read -n1 -r -p "Press any key to continue..." key; }

if [[ "$@" =~ "-h" || "$@" =~ "--help" ]] ; then
    usage;
fi

MAKE=$(which make)
CMAKE=$(which cmake)

BORG_LIB_DIR="$HOME/.emacs.d/lib"
PACKS_DIR="$HOME/.emacs.d/packs"

DASH_DIR="$BORG_LIB_DIR/dash"

CIDER_MAKEABLE_DIR="$PACKS_DIR/dev/clojure-pack/vendor/submodules/cider"

MAKEABLE_DIRS=(
    "$PACKS_DIR/dev/lang-pack/vendor/submodules/js2"
    "$PACKS_DIR/dev/lang-pack/vendor/submodules/yaml-mode"
    "$PACKS_DIR/dev/clojure-pack/vendor/submodules/hydra"
    "$PACKS_DIR/dev/clojure-pack/vendor/submodules/cider"
    "$PACKS_DIR/dev/foundation-pack/vendor/submodules/epl"
    "$PACKS_DIR/dev/foundation-pack/vendor/submodules/pkg-info"
    "$BORG_LIB_DIR/auto-compile"
    "$PACKS_DIR/dev/foundation-pack/vendor/submodules/popwin"
    "$PACKS_DIR/dev/foundation-pack/vendor/submodules/emacs-async"
    "$PACKS_DIR/dev/foundation-pack/vendor/submodules/company-mode"
)

CMAKEABLE_DIRS=(
)

# $PACKS_DIR/dev/clojure-pack/vendor/submodules/popup-el # only tests and elpa
# $PACKS_DIR/dev/clojure-pack/vendor/submodules/edn # only tests and elpa
# $PACKS_DIR/dev/colour-pack/vendor/checkouts/color-theme-6.6.0 # themes/color-theme-library.el:31:13:Error: Cannot open load file: no such file or directory, color-theme
# $PACKS_DIR/dev/power-pack/vendor/submodules/emacs-git-gutter # only tests and elpa
# $PACKS_DIR/dev/power-pack/vendor/submodules/gh # the config.mk trick does not work, maybe PR to the project?
# $PACKS_DIR/dev/power-pack/vendor/submodules/ht # only tests and elpa
# $PACKS_DIR/dev/power-pack/vendor/submodules/scratch # only tests and elpa
# $PACKS_DIR/dev/clojure-pack/vendor/submodules/clojure-mode # does not compile

function compile_cider {
    pushd "$CIDER_MAKEABLE_DIR"
    eldev compile && eldev build :autoloads
    popd

}

function clean_cider {
    pushd "$CIDER_MAKEABLE_DIR"
    eldev clean
    popd
}

function compile {
    compile_cider

    # For auto-compile
    export LOADPATH="-L $DASH_DIR"
    export LOADPATH+="-L $BORG_LIB_DIR/packed"

    # The make target could be included in the list above
    for dir in ${MAKEABLE_DIRS[@]}; do
        if [[ "$dir" =~ "company-mode" ]]; then
            $MAKE -C "$dir" compile
        elif [[ "$dir" =~ "cider" ]]; then
            pushd "$dir"
            cask install
            $MAKE build
            popd
	else
            $MAKE -C "$dir"
        fi
    done

    for dir in "${CMAKEABLE_DIRS[@]}"; do
        pushd "$dir"
        $CMAKE .
        $MAKE
        popd
    done
    unset LOADPATH
}

function clean {
    clean_cider

    for dir in "${MAKEABLE_DIRS[@]}"; do
        $MAKE -C "$dir" clean
    done

    # Better clean for cmake?
    for dir in ${CMAKEABLE_DIRS[@]}; do
        pushd "$dir"
        rm -vf Makefile cmake_install.cmake CMakeCache.txt
        rm -Rvf CMakeFiles
        rm -vf *.elc
        popd
    done
}

if [[ "$@" =~ "--clean" ]] ; then
    clean
elif [[ $# -eq 0 ]] ; then
    compile
else
    if [[ "$@" =~ "--cider" ]] ; then
	    compile_cider
    else
        usage
    fi
fi
